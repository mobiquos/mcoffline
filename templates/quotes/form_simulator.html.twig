{% form_theme form 'bootstrap_5_layout.html.twig' %}

{{ form_start(form, {'action': path('app_quotes'), 'method': 'POST'}) }}
<div class="row">
    <div class="col-md-6">
        {{ form_row(form.rut) }}
        <div id="alerts-rut"></div>
        {{ form_row(form.amount) }}
        {{ form_rest(form) }}
    </div>
    <div class="col-md-6">
        <div id="panel-client">
            {% if client is defined and client is not null %}
            {% include 'quotes/info_client.html.twig' with {client: client} %}
            {% else %}
            <p class="text-muted">Ingrese un RUT en el simulador para ver la información del cliente.</p>
            {% endif %}
        </div>
    </div>
</div>
<div class="row px-3 g-2">
    <div class="col-6">
        <button id="btn-submit-simulation" type="submit" name="simulate" value="simulate"
            class="btn btn-primary w-100">Simular</button>
    </div>
    <div class="col-3">
        <a href="{{ path('app_quotes') }}" class="btn btn-secondary w-100">Limpiar</a>
    </div>
    <div class="col-3">
        <a href="{{ path('home') }}" class="btn btn-warning text-white w-100">Salir</a>
    </div>
</div>
<div class="row mt-3">
    <div class="col-md-12">
        {% if installment_amount is defined %}
        <div class="row">
            <div class="col-6">
                <label class="form-label">Tasa de Interés</label>
                <input type="text" class="form-control" value="{{ interest }}%" disabled>
            </div>
            <div class="col-6">
                <label class="form-label">Próximo Vencimiento</label>
                <input type="text" class="form-control" value="{{ due_date|date(" d/m/Y") }}" disabled>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-6">
                <label class="form-label">Valor Cuota</label>
                <input type="text" class="form-control" value="${{ installment_amount|number_format(0, ',', '.') }}"
                    disabled>
            </div>
            <div class="col-6">
                <label class="form-label">Costo Total Crédito</label>
                <input type="text" class="form-control" value="${{ total|number_format(0, ',', '.') }}" disabled>
            </div>
        </div>
        {% if installment_amount < min_installment_amount %} <div class="row mt-3">
            <div class="col-12">
                <p class="alert alert-danger">El monto mínimo para el valor de una cuota es de ${{
                    min_installment_amount|number_format(0, ',', '.') }}</p>
            </div>
    </div>
    <button id="btn-save-simulation" type="submit" name="simulation_form[save]" value="true" disabled
        class="btn btn-success w-100">Guardar Simulación</button>
    {% else %}
    <button type="button" value="true"
        class="btn btn-success w-100 mt-3" onclick="return confirmSubmit()">Guardar Simulación</button>

    <button id="btn-save-simulation" type="submit" name="simulation_form[save]" value="true"
        class="btn d-none">Guardar Simulación</button>
    {% endif %}
    {% endif %}
</div>
</div>

{{ form_end(form) }}

<script>
    const formatter = new Intl.NumberFormat("de-DE"); // dot for thousands, comma for decimals

    function setupFormattedNumberInput(input) {
        input.addEventListener("input", () => {
            let raw = input.value.replace(/\D/g, ""); // only digits
            input.dataset.raw = raw;
            input.value = raw ? formatter.format(raw) : "";

            // Clear error when typing
            removeError(input);
        });

        input.form.addEventListener("submit", (e) => {
            let rawValue = input.dataset.raw || "";
            let numeric = rawValue ? parseInt(rawValue, 10) : NaN;

            let min = input.getAttribute("min");
            let max = input.getAttribute("max");

            let errorMsg = "";

            if (!rawValue) {
                errorMsg = "This field is required.";
            } else if (min && numeric < parseInt(min, 10)) {
                errorMsg = `El monto debe ser mayor a ${formatter.format(min)}.`;
            } else if (max && numeric > parseInt(max, 10)) {
                errorMsg = `El monto debe ser menor a ${formatter.format(max)}.`;
            }

            if (errorMsg) {
                e.preventDefault();
                showError(input, errorMsg);
                return;
            }

            // Clean formatted value before submitting
            input.value = numeric;
        });
    }

    function cleanInput() {
        let rawValue = input.dataset.raw || "";
        let numeric = rawValue ? parseInt(rawValue, 10) : NaN;
        input.value = numeric;
    }

    function showError(input, message) {
        removeError(input);

        input.classList.add("has-error");

        const errorDiv = document.createElement("div");
        errorDiv.className = "invalid-feedback d-block";
        errorDiv.textContent = message;

        input.insertAdjacentElement("afterend", errorDiv);
    }

    function removeError(input) {
        input.classList.remove("has-error");
        const next = input.nextElementSibling;
        if (next && next.classList.contains("invalid-feedback")) {
            next.remove();
        }
    }

    setupFormattedNumberInput(document.getElementById("simulation_form_amount"))
    let input =  document.getElementById("simulation_form_amount");
    let raw = input.value.replace(/\D/g, ""); // only digits
    input.dataset.raw = raw;
    input.value = raw ? formatter.format(raw) : "";

    const debounce = (callback, wait) => {
        let timeoutId = null;
        return (...args) => {
            window.clearTimeout(timeoutId);
            timeoutId = window.setTimeout(() => {
                callback.apply(null, args);
            }, wait);
        };
    }

    const rutInput = document.querySelector('#simulation_form_rut');
    const alertsRut = document.querySelector('#alerts-rut');
    const panelClient = document.querySelector('#panel-client');

    if (rutInput) {
        // Format RUT on input
        rutInput.addEventListener('input', (evt) => {
            // Format the RUT value as the user types
            let rutValue = rutInput.value;
            // Remove any existing formatting to avoid double formatting
            let rut = cleanRut(rutValue);
            // Format the clean RUT
            if (rut.length > 0) {
                rutInput.value = formatRut(rut);
            }
        });

        rutInput.addEventListener('keyup', debounce((evt) => {
            panelClient.innerHTML = "";
            alertsRut.innerHTML = "";
            let rut = rutInput.value;

            fetch(`{{ path('app_quotes_client') }}?rut=${rut}`)
                .then(response => {
                    const isSuccess = response.status === 200;
                    document.querySelectorAll('form[name="simulation_form"] input:not(#simulation_form_rut), form[name="simulation_form"] select')
                        .forEach(e => e.disabled = !isSuccess);

                    return response.text()
                })
                .then(content => {
                    panelClient.innerHTML = content;
                });
        }, 1000));
    }

    function confirmSubmit() {
        event.preventDefault();
        Swal.fire({
            title: '¿Está seguro que desea continuar?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Sí, continuar',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                cleanInput(document.querySelector('#simulation_form_amount'));
                // const form = document.querySelector('form[name="simulation_form"]');
                // form.submit();
                document.querySelector("#btn-save-simulation").click();
            }
        });
        return false;
    }
</script>
