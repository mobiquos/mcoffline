{% extends 'tool_base.html.twig' %}
{% form_theme form 'bootstrap_5_layout.html.twig' %}

{% block page_title %}Caja: Abono/Pago Cuenta{% endblock %}

{% block form_content %}
{% for label, messages in app.flashes %}
{% for message in messages %}
<div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
    {{ message }}
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
{% endfor %}
{% endfor %}

<div class="card">
    <div class="card-body">
        {{ form_start(form) }}
        <div class="row">
            <div class="col-md-6">
                {{ form_row(form.rut) }}
                <div id="alerts-rut"></div>
                {{ form_row(form.amount) }}
                {{ form_row(form.paymentMethod) }}
                {{ form_row(form.voucherId) }}
                <div class="row mt-3">
                    <div class="col-6">
                        <button type="button" value="true" class="btn btn-success w-100"
                            onclick="return confirmSubmit()">Registrar Pago</button>
                    </div>
                    <div class="col-6">
                        <a href="{{ path('home') }}" class="btn btn-warning text-white w-100">Salir</a>
                    </div>
                </div>

                <button id="btn-save" type="submit" value="true" class="btn d-none">Registrar Pago</button>
            </div>
            <div class="col-md-6">
                <div id="panel-client">
                    <p class="text-muted">Ingrese un RUT para ver la información del cliente.</p>
                    {% if client is defined %}
                        {% include 'quotes/info_client.html.twig' with {client: client} %}
                    {% endif %}
                </div>
            </div>
        </div>
        {{ form_end(form) }}
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
    const formatter = new Intl.NumberFormat("de-DE"); // dot for thousands, comma for decimals
    function setupFormattedNumberInput(input, errorEl) {

        input.addEventListener("input", () => {
            let raw = input.value.replace(/\D/g, ""); // only digits
            input.dataset.raw = raw;
            input.value = raw ? formatter.format(raw) : "";

            // Clear error when typing
            removeError(input);
        });


        input.form.addEventListener("submit", (e) => {
            let rawValue = input.dataset.raw || "";
            let numeric = rawValue ? parseInt(rawValue, 10) : NaN;

            let min = input.getAttribute("min");
            let max = input.getAttribute("max");

            let errorMsg = "";

            if (!rawValue) {
                errorMsg = "This field is required.";
            } else if (min && numeric < parseInt(min, 10)) {
                errorMsg = `El monto debe ser mayor a ${formatter.format(min)}.`;
            } else if (max && numeric > parseInt(max, 10)) {
                errorMsg = `El monto debe ser menor a ${formatter.format(max)}.`;
            }

            if (errorMsg) {
                e.preventDefault();
                showError(input, errorMsg);
                return;
            }

            // Clean formatted value before submitting
            input.value = numeric;
        });
    }

    function cleanInput() {
        let rawValue = input.dataset.raw || "";
        let numeric = rawValue ? parseInt(rawValue, 10) : NaN;
        input.value = numeric;
    }

    function showError(input, message) {
        removeError(input);

        input.classList.add("has-error");

        const errorDiv = document.createElement("div");
        errorDiv.className = "invalid-feedback d-block";
        errorDiv.textContent = message;

        input.insertAdjacentElement("afterend", errorDiv);
    }

    function removeError(input) {
        input.classList.remove("has-error");
        const next = input.nextElementSibling;
        if (next && next.classList.contains("invalid-feedback")) {
            next.remove();
        }
    }

    setupFormattedNumberInput(document.getElementById("payment_form_amount"))
    let input = document.getElementById("payment_form_amount");
    let raw = input.value.replace(/\D/g, ""); // only digits
    input.dataset.raw = raw;
    input.value = raw ? formatter.format(raw) : "";

    const debounce = (callback, wait) => {
        let timeoutId = null;
        return (...args) => {
            window.clearTimeout(timeoutId);
            timeoutId = window.setTimeout(() => {
                callback.apply(null, args);
            }, wait);
        };
    }

    const rutInput = document.querySelector('#payment_form_rut');
    const alertsRut = document.querySelector('#alerts-rut');
    const panelClient = document.querySelector('#panel-client');

    if (rutInput) {
        rutInput.addEventListener('keyup', debounce((evt) => {
            panelClient.innerHTML = "";
            alertsRut.innerHTML = "";
            let rut = rutInput.value;
            fetch(`{{ path('app_payment_rut') }}?rut=${rut}`)
                .then(response => {
                    const isSuccess = response.status === 200;
                    document.querySelectorAll('form[name="payment_form"] input:not(#payment_form_rut), form[name="payment_form"] select')
                        .forEach(e => e.disabled = !isSuccess);
                    return response.text().then(content => {
                        alertsRut.innerHTML = content;
                        return isSuccess;
                    });
                })
                .then(isSuccess => {
                    if (!isSuccess) return;
                    fetch(`{{ path('app_payment_client') }}?rut=${rut}`)
                        .then(response => response.text())
                        .then(content => panelClient.innerHTML = content);
                });
        }, 500));
    }

    const paymentMethodInputs = document.querySelectorAll('input[name="payment_form[paymentMethod]"]');
    const voucherIdInput = document.querySelector('#payment_form_voucherId');

    voucherIdInput.addEventListener('input', function (e) {
        this.value = this.value.replace(/[^0-9]/g, '');
    });

    const toggleVoucherId = () => {
        const selectedPaymentMethod = document.querySelector('input[name="payment_form[paymentMethod]"]:checked');
        if (selectedPaymentMethod && selectedPaymentMethod.value === '{{ constant('App\\Entity\\Payment::PAYMENT_METHOD_CASH') }}') {
            voucherIdInput.disabled = true;
            voucherIdInput.value = '';
        } else {
            voucherIdInput.disabled = false;
        }
    };

    paymentMethodInputs.forEach(input => {
        input.addEventListener('change', toggleVoucherId);
    });

    toggleVoucherId();

    function confirmSubmit() {
        event.preventDefault();
        Swal.fire({
            title: '¿Está seguro que desea continuar?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Sí, continuar',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                cleanInput(document.querySelector('#payment_form_amount'));
                document.querySelector("#btn-save").click();
            }
        });
        return false;
    }
</script>
{% endblock %}
